#!/usr/bin/env python3
# -*-coding: utf-8-*-

"""Tools"""

from __future__ import (division, absolute_import, unicode_literals,
                        print_function)

import validate
import configobj
import numpy
import collections
import six
import sys
import os
import shutil
import logging


def cobj_check(settings, exception=None, copy=False):
    """Check for errors in config file"""

    if not exception:
        exception = Exception

    validator = validate.Validator()

    def numpy_array(val):
        """Define float list"""
        float_list = validator.functions["float_list"](val)
        return numpy.array(float_list)
    validator.functions["numpy_array"] = numpy_array

    results = settings.validate(validator, copy=copy, preserve_errors=True)
    if results is not True:
        output = "{0}: \n".format(
            settings.filename if settings.filename is not None else
            "configobj")
        for (section_list, key, error) in configobj.flatten_errors(
                settings, results):
            if key is not None:
                val = settings
                for section in section_list:
                    val = val[section]
                val = val[key] if key in val else "<EMPTY>"
                output += "   [{sections}], {key}='{val}' ({error})\n".format(
                    sections=', '.join(section_list),
                    key=key,
                    val=val,
                    error=error)
            else:
                output += "Missing section: {0}\n".format(
                    ", ".join(section_list))
        raise exception(output)


class Cache(object):
    """Class which save output when called"""
    # (too few public methods) pylint: disable=R0903

    def __init__(self):
        self.output = None

    def __call__(self, output):
        self.output = output
        return output


def get_iter(elem, make_list=False):
    """Return iterable"""
    if isinstance(elem, six.string_types):
        return [elem]
    elif isinstance(elem, collections.Iterable):
        if make_list:
            return list(elem)
        else:
            return elem
    else:
        return [elem]


class SetList(list):
    """Class which keeps all elements unique"""

    def __init__(self, init_list=None):
        list.__init__(self)
        if init_list is not None:
            for elem in init_list:
                self.append(elem)

    def __add__(self, list2):
        new = SetList(self)
        for elem in self._get_iter(list2):
            new.append(elem)
        return new

    @staticmethod
    def _get_iter(list2):
        """Return iterable list"""
        if not isinstance(list2, collections.Iterable):
            return [list2]
        else:
            return list2

    def __iadd__(self, list2):
        for elem in self._get_iter(list2):
            self.append(elem)
        return self

    def __sub__(self, list2):
        new = SetList(self)
        for elem in self._get_iter(list2):
            if elem in new:
                new.remove(elem)
        return new

    def __isub__(self, list2):
        for elem in self._get_iter(list2):
            if elem in self:
                self.remove(elem)
        return self

    def append(self, elem):
        if elem not in self:
            list.append(self, elem)

    def extend(self, list2):
        for elem in list2:
            self.append(elem)


class Delayed(object):
    """Class which will delayed add variable/attributes"""
    # pylint: disable=R0903
    def __init__(self, name, init_func):
        self.module = sys.modules[name]
        self.init_func = init_func
        sys.modules[name] = self
        self.initializing = True

    def __getattr__(self, name):
        # call module.__init__ after import introspection is done
        if self.initializing and not name[:2] == '__' == name[-2:]:
            self.initializing = False
            self.init_func(self.module)
        return getattr(self.module, name)


def list_remove(alist, items):
    """Remove items from a list"""
    for item in get_iter(items):
        while item in alist:
            alist.remove(item)


def create_dir(fname, remove=False, is_dir=False, is_file=False):
    """If the directory for fname does not exists, create it"""

    if not isinstance(fname, six.string_types):
        print("cannot create_dir for {0}".format(fname))
        return

    dirname = os.path.dirname(fname)
    if is_file:
        dirname = dirname
    elif is_dir:
        dirname = fname
    elif os.path.splitext(fname)[1] == "":
        dirname = fname

    if os.path.exists(fname) and remove:
        if os.path.islink(fname) or os.path.isfile(fname):
            os.remove(fname)
        else:
            shutil.rmtree(fname)
    if dirname != "" and not os.path.exists(dirname):
        os.makedirs(dirname)


class Lazy(object):
    """Object which is only run when str representation
        f.e.: logger.debug(run_function)
        http://stackoverflow.com/questions/4148790
            /lazy-logger-message-string-evaluation"""
    # (too few public methods) pylint: disable=R0903

    def __init__(self, func):
        self.func = func

    def __str__(self):
        return self.func()


def get_output_handler(level="INFO"):
    """Print info message, and higher level message including debug level"""
    # create console handler and set level to info
    handler = logging.StreamHandler()
    handler.setLevel(getattr(logging, level.upper()))
    formatter = LogFormatter(
        "%(levelname)s: %(message)s")
#         {logging.INFO: "%(message)s"})
    handler.setFormatter(formatter)
    return handler


class LogFormatter(logging.Formatter):
    """Format logging message based on msg style"""

    def __init__(self, default_style, style_dict=None):
        logging.Formatter.__init__(self, default_style)
        self.style_dict = {} if style_dict is None else style_dict
        self.default_style = default_style

    def format(self, record):
        self._fmt = self.style_dict.get(record.levelno, self.default_style)
        if six.PY3:
            self._style = logging.PercentStyle(self._fmt)
        return logging.Formatter.format(self, record)


def get_debug_handler(fname, flags="w+"):
    """Get a file handler which logs everything"""
    # create debug file handler and set level to debug
    handler = logging.FileHandler(fname, flags)
    handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter(
        "%(levelname)s - %(asctime)s\n" +
        "%(name)s - %(pathname)s +%(lineno)s\n" +
        "%(message)s\n")
    handler.setFormatter(formatter)
    return handler
